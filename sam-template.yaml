AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Converts WEBM videos uploaded to a S3 bucket to MP4 videos in a destination bucket.'
Resources:
  InputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref InputBucketName
      NotificationConfiguration:
        TopicConfigurations:
          - Event: 's3:ObjectCreated:*'
            Topic: !Ref BucketCreatedTopic
    DependsOn: ['BucketCreatedTopicPolicy']
  BucketCreatedTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  BucketCreatedTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref BucketCreatedTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: ['SNS:Publish']
            Resource: '*'
            Condition:
              ArnLike:
                'aws:SourceArn': !Join ['', ['arn:aws:s3:::', !Ref InputBucketName]]
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties: {}
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WebMTaskRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref InputBucketName]]
                  - !Join ['', ['arn:aws:s3:::', !Ref InputBucketName, '/*']]
                  - !Join ['', ['arn:aws:s3:::', !Ref OutputBucketName]]
                  - !Join ['', ['arn:aws:s3:::', !Ref OutputBucketName, '/*']]
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref Topic
  ECSLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: "sammarks/cloudformation-webm-mp4:PACKAGE_VERSION"
          Environment:
            - Name: OUTPUT_BUCKET
              Value: !Ref OutputBucketName
            - Name: SNS_TOPIC
              Value: !Ref Topic
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities: ['FARGATE']
  TriggerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: trigger.handler
      Runtime: nodejs12.x
      CodeUri: src
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaExecute
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt Topic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - 'ecs:RunTask'
              Resource:
                - !Ref TaskDefinition
        - Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource:
                - !GetAtt ECSTaskExecutionRole.Arn
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          ECS_TASK_DEFINITION: !Ref TaskDefinition
          ECS_TASK_CONTAINER: !Ref ContainerName
          SUBNET_NAMES: !Ref SubnetNames
          SECURITY_GROUP_NAMES: !Ref SecurityGroupNames
          SNS_TOPIC: !Ref Topic
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: !Ref BucketCreatedTopic
Parameters:
  InputBucketName:
    Type: String
    Description: "The name of the input bucket. We WILL create this for you."
  OutputBucketName:
    Type: String
    Description: "The name of the output bucket. We WILL NOT create this for you."
  ContainerName:
    Type: String
    Default: webm-convert
    Description: "The name of the ECS container to create inside the task definition."
  SubnetNames:
    Type: String
    Description: "A comma-separated listed of VPC subnet names."
  SecurityGroupNames:
    Type: String
    Description: "A comma-separated list of security groups to use for the task."
Outputs:
  InputBucket:
    Description: S3 Input Bucket
    Value: !Ref InputBucket
  InputBucketArn:
    Description: S3 Input Bucket ARN
    Value: !GetAtt InputBucket.Arn
  Topic:
    Description: SNS Notification Topic
    Value: !Ref Topic
  S3Topic:
    Description: S3 Object Created SNS Topic
    Value: !Ref BucketCreatedTopic
